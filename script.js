const gameBox = document.getElementById("game-box");
let currentStep = 0;
let score = 0;
let currentPhotoIndex = 0;
let currentTheme = 0;

// Armazenamento completo das respostas
let userResponses = [];
let totalQuestions = 0;

// Data de quando come√ßaram (ALTERE AQUI!)
const startDate = new Date('2025-05-15'); // Formato: YYYY-MM-DD

// √Åudios
const correctSound = document.getElementById('correct-sound');
const wrongSound = document.getElementById('wrong-sound');
const helloKittySound = document.getElementById('hello-kitty-sound');
const supernaturalSound = document.getElementById('supernatural-sound');
const harryPotterSound = document.getElementById('harry-potter-sound');
const heartbeatSound = document.getElementById('heartbeat-sound');
const echoSound = document.getElementById('echo-sound');
const magicSound = document.getElementById('magic-sound');

// PERGUNTAS EXPANDIDAS - Mais m√∫ltipla escolha e texto
const questions = [
    {
        question: "Qual foi o primeiro lugar onde sa√≠mos juntos?",
        options: ["Lanchonete", "Pizzaria üçï", "Cafeteria", "Cinema", "Pra√ßa"],
        correct: 3,
        type: "multiple"
    },
    {
        question: "Escreva uma palavra que descreve como voc√™ se sente quando est√° comigo:",
        type: "text",
        placeholder: "Digite aqui como voc√™ se sente..."
    },
    {
        question: "O que ele mais gosta em voc√™?",
        options: ["Seu jeito", "Seu sorriso", "Seu humor", "Tudo"],
        correct: 3,
        type: "multiple"
    },
    {
        question: "Complete a frase: 'Voc√™ √©...'",
        type: "text",
        placeholder: "Voc√™ √©..."
    },
    {
        question: "Qual sua comida favorita que voc√™s j√° comeram juntos?",
        options: ["Pizza", "Hamb√∫rguer", "A√ßa√≠", "Pipoca do cinema"],
        correct: 1,
        type: "multiple"
    },
    {
        question: "Escreva o que voc√™ mais ama nele:",
        type: "text",
        placeholder: "O que voc√™ mais ama nele..."
    },
    {
        question: "O que ele faria por voc√™ sem pensar duas vezes?",
        options: ["Te dar um presente", "Viajar quil√¥metros s√≥ pra te ver", "Ficar at√© tarde ouvindo voc√™", "Todas as anteriores"],
        correct: 3,
        type: "multiple"
    },
    {
        question: "Descreva o primeiro beijo de voc√™s em uma palavra:",
        type: "text",
        placeholder: "Uma palavra sobre o primeiro beijo..."
    },
    {
        question: "Qual apelido carinhoso ele mais usa com voc√™?",
        options: ["Amor", "Vida", "Linda", "Minha Gata"],
        correct: 3,
        type: "multiple"
    },
    {
        question: "Se voc√™s fossem viajar juntos, para onde iriam?",
        type: "text",
        placeholder: "Qual lugar?..."
    },
    {
        question: "Escreva uma mensagem fofa para ele:",
        type: "text",
        placeholder: "Sua mensagem especial aqui..."
    },
    {
        question: "Qual filme voc√™s mais gostaram de assistir juntos?",
        options: ["Romance", "Terror", "Com√©dia", "A√ß√£o"],
        correct: 2,
        type: "multiple"
    },
    {
        question: "Conte o que mais te faz sorrir nele:",
        type: "text",
        placeholder: "O que te faz sorrir nele..."
    },
    {
        question: "Se ele fosse um personagem da Marvel, qual seria?",
        options: ["Homem de Ferro ü§ñ", "Homem-Aranha üï∏Ô∏è", "Capit√£o Am√©rica üá∫üá∏", "Thor üî®"],
        correct: 1,
        type: "multiple"
    },
    {
        question: "Escreva como voc√™ imagina o futuro de voc√™s:",
        type: "text",
        placeholder: "Como voc√™ imagina nosso futuro..."
    },
    {
        question: "Qual a coisa mais rom√¢ntica que ele j√° fez por voc√™?",
        options: ["Me surpreendeu", "Lembrou de algo importante", "Foi carinhoso quando eu precisava", "Todas as anteriores"],
        correct: 3,
        type: "multiple"
    },
    {
        question: "Se voc√™ pudesse dizer algo para ele agora, o que seria?",
        type: "text",
        placeholder: "O que voc√™ diria para ele agora..."
    },
    {
        question: "Se ele fosse um personagem de Supernatural, qual seria?",
        options: ["Sam Winchester", "Dean Winchester", "Castiel"],
        correct: 0,
        type: "multiple"
    },
    {
        question: "Descreva em uma frase por que voc√™ gosta dele:",
        type: "text",
        placeholder: "Por que voc√™ gosta dele..."
    },
    {
        question: "Se ele fosse um personagem de Harry Potter, qual seria?",
        options: ["Harry Potter ‚ö°", "Rony Weasley", "Hermione Granger", "Neville Longbottom"],
        correct: 0,
        type: "multiple"
    },
    {
        question: "Escreva a coisa mais engra√ßada que ele j√° fez:",
        type: "text",
        placeholder: "A coisa mais engra√ßada que ele fez..."
    },
    {
        question: "Qual seria o encontro perfeito para voc√™s?",
        type: "text",
        placeholder: "Escreva..."
    },
    {
        question: "Complete: ' porque...'",
        type: "text",
        placeholder: "Amo voc√™ porque..."
    }
];

// Calcular dias juntos
function updateDaysCounter() {
    const today = new Date();
    const diffTime = Math.abs(today - startDate);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const daysElement = document.getElementById('days-count');
    if (daysElement) {
        daysElement.textContent = diffDays;
    }
}

// Controle de volume
function setupVolumeControl() {
    const volumeSlider = document.getElementById('volume-slider');
    if (!volumeSlider) return;
    
    volumeSlider.addEventListener('input', (e) => {
        const volume = e.target.value / 100;
        
        if (correctSound) correctSound.volume = volume;
        if (wrongSound) wrongSound.volume = volume;
        if (helloKittySound) helloKittySound.volume = volume;
        if (supernaturalSound) supernaturalSound.volume = volume;
        if (harryPotterSound) harryPotterSound.volume = volume * 2.5;
        if (heartbeatSound) heartbeatSound.volume = volume * 0.5;
        if (echoSound) echoSound.volume = volume * 0.7;
        if (magicSound) magicSound.volume = volume * 0.8;
    });
    
    // Volume inicial
    const initialVolume = 0.3;
    if (correctSound) correctSound.volume = initialVolume;
    if (wrongSound) wrongSound.volume = initialVolume;
    if (helloKittySound) helloKittySound.volume = initialVolume;
    if (supernaturalSound) supernaturalSound.volume = initialVolume;
    if (harryPotterSound) harryPotterSound.volume = initialVolume * 2.5;
    if (heartbeatSound) heartbeatSound.volume = initialVolume * 0.5;
    if (echoSound) echoSound.volume = initialVolume * 0.7;
    if (magicSound) magicSound.volume = initialVolume * 0.8;
}

// Galeria de fotos com legendas rom√¢nticas
const photoLegends = [
    "üíï Esse momento especial que ficar√° para sempre em meu cora√ß√£o! üíï",
    "üé¨ No cinema, assistindo ao filme... mas eu s√≥ conseguia olhar para voc√™! üçø",
    "‚ú® Esse momento especial que ficar√° para sempre em meu cora√ß√£o ‚ú®",
    "üíñ Juntos sempre, como dois cora√ß√µes que batem no mesmo ritmo üíñ"
];

function toggleGallery() {
    const gallery = document.getElementById('photo-gallery');
    const gameBox = document.getElementById('game-box');
    const responsesHistory = document.getElementById('responses-history');
    
    if (!gallery || !gameBox) return;
    
    if (gallery.style.display === 'none' || !gallery.style.display) {
        gallery.style.display = 'block';
        gameBox.style.display = 'none';
        responsesHistory.style.display = 'none';
        updatePhotoCaption();
    } else {
        gallery.style.display = 'none';
        gameBox.style.display = 'block';
    }
}

function updatePhotoCaption() {
    const existingCaption = document.querySelector('.photo-caption');
    if (existingCaption) {
        existingCaption.remove();
    }
    
    const photoSlider = document.querySelector('.photo-slider');
    if (!photoSlider) return;
    
    const caption = document.createElement('div');
    caption.className = 'photo-caption';
    caption.textContent = photoLegends[currentPhotoIndex] || "üíï Um momento especial nosso üíï";
    photoSlider.appendChild(caption);
}

function nextPhoto() {
    const photos = document.querySelectorAll('.photo-slider img');
    if (photos.length === 0) return;
    
    photos[currentPhotoIndex].classList.remove('active');
    currentPhotoIndex = (currentPhotoIndex + 1) % photos.length;
    photos[currentPhotoIndex].classList.add('active');
    updatePhotoCaption();
}

function prevPhoto() {
    const photos = document.querySelectorAll('.photo-slider img');
    if (photos.length === 0) return;
    
    photos[currentPhotoIndex].classList.remove('active');
    currentPhotoIndex = (currentPhotoIndex - 1 + photos.length) % photos.length;
    photos[currentPhotoIndex].classList.add('active');
    updatePhotoCaption();
}

// Fun√ß√£o para mostrar/esconder hist√≥rico COMPLETO de respostas
function showResponses() {
    const responsesHistory = document.getElementById('responses-history');
    const gameBox = document.getElementById('game-box');
    const gallery = document.getElementById('photo-gallery');
    
    if (!responsesHistory || !gameBox) return;
    
    responsesHistory.style.display = 'block';
    gameBox.style.display = 'none';
    gallery.style.display = 'none';
    
    updateResponsesList();
}

function hideResponses() {
    const responsesHistory = document.getElementById('responses-history');
    const gameBox = document.getElementById('game-box');
    
    if (!responsesHistory || !gameBox) return;
    
    responsesHistory.style.display = 'none';
    gameBox.style.display = 'block';
}

function updateResponsesList() {
    const responsesList = document.getElementById('responses-list');
    const scoreSummary = document.getElementById('score-summary');
    
    if (!responsesList || !scoreSummary) return;
    
    if (userResponses.length === 0) {
        responsesList.innerHTML = '<p style="text-align: center; color: #666;">Ainda n√£o h√° respostas para mostrar üíï</p>';
        scoreSummary.innerHTML = '';
        return;
    }
    
    // Calcular estat√≠sticas
    const multipleChoiceResponses = userResponses.filter(r => r.type === 'multiple');
    const textResponses = userResponses.filter(r => r.type === 'text');
    const correctAnswers = multipleChoiceResponses.filter(r => r.isCorrect).length;
    const totalMultiple = multipleChoiceResponses.length;
    
    // Mostrar resumo da pontua√ß√£o
    if (totalMultiple > 0) {
        scoreSummary.innerHTML = `
            <h4>üìä Resumo da Performance</h4>
            <p>‚úÖ Acertos: ${correctAnswers}/${totalMultiple} perguntas de m√∫ltipla escolha</p>
            <p>üí¨ Respostas escritas: ${textResponses.length}</p>
            <p>üìù Total de respostas: ${userResponses.length}</p>
            <p>üéØ Taxa de acerto: ${totalMultiple > 0 ? Math.round((correctAnswers/totalMultiple)*100) : 0}%</p>
        `;
    } else {
        scoreSummary.innerHTML = `
            <h4>üìä Resumo</h4>
            <p>üí¨ Respostas escritas: ${textResponses.length}</p>
            <p>üìù Total de respostas: ${userResponses.length}</p>
        `;
    }
    
    // Listar todas as respostas
    let html = '';
    userResponses.forEach((response, index) => {
        const themeEmoji = ['üéÄ', 'üëª', '‚ö°'][response.theme];
        const questionNumber = response.questionNumber;
        
        html += `
            <div class="response-display">
                <h4>
                    <span class="question-number">${questionNumber}</span>
                    ${themeEmoji} ${response.question}
                </h4>
        `;
        
        if (response.type === 'text') {
            html += `
                <div class="response-text">
                    "${response.answer}"
                </div>
            `;
        } else if (response.type === 'multiple') {
            const choiceClass = response.isCorrect ? 'correct-choice' : 'wrong-choice';
            const resultClass = response.isCorrect ? 'correct' : 'wrong';
            const resultText = response.isCorrect ? 'ACERTOU! ‚úÖ' : 'ERROU ‚ùå';
            
            html += `
                <div class="multiple-choice-response ${choiceClass}">
                    <span>Ela escolheu: "<strong>${response.answer}</strong>"</span>
                    <span class="choice-result ${resultClass}">${resultText}</span>
                </div>
                <small style="color: #888;">Resposta correta era: "${response.correctAnswer}"</small>
            `;
        }
        
        html += `
                <small style="color: #888; display: block; margin-top: 5px;">
                    Tema ${['Hello Kitty', 'Supernatural', 'Harry Potter'][response.theme]} ‚Ä¢ ${response.timestamp}
                </small>
            </div>
        `;
    });
    
    responsesList.innerHTML = html;
}

// Part√≠culas flutuantes baseadas no tema
function createParticle() {
    const particles = document.getElementById('particles');
    if (!particles) return;
    
    const particle = document.createElement('div');
    particle.className = 'particle';
    
    let symbols;
    switch(currentTheme) {
        case 0: // Hello Kitty
            symbols = ['üíñ', 'üå∏', '‚ú®', 'üí´', 'üéÄ', 'üíï'];
            break;
        case 1: // Supernatural
            symbols = ['üëª', 'üî•', '‚ö°', 'üåô', 'üó°Ô∏è', 'üöó'];
            break;
        case 2: // Harry Potter
            symbols = ['‚ö°', 'üîÆ', 'ü™Ñ', 'ü¶â', 'üìö', '‚ú®', 'üè∞'];
            break;
    }
    
    particle.textContent = symbols[Math.floor(Math.random() * symbols.length)];
    particle.style.left = Math.random() * 100 + 'vw';
    particle.style.animationDuration = (Math.random() * 3 + 2) + 's';
    
    particles.appendChild(particle);
    
    setTimeout(() => {
        if (particle.parentNode) {
            particle.remove();
        }
    }, 5000);
}

// Criar part√≠culas periodicamente
setInterval(createParticle, 2000);

// Efeitos especiais baseados no tema
let mouseX = 0, mouseY = 0;

document.addEventListener('mousemove', (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
    
    // Efeitos diferentes para cada tema
    if (currentTheme === 0 && Math.random() < 0.3) {
        createSparkle(mouseX, mouseY);
    }
});

function createSparkle(x, y) {
    const sparkle = document.createElement('div');
    sparkle.className = 'sparkle';
    sparkle.style.left = x + 'px';
    sparkle.style.top = y + 'px';
    
    const sparkleSymbols = ['‚ú®', 'üí´', '‚≠ê', 'üåü', 'üíñ'];
    sparkle.textContent = sparkleSymbols[Math.floor(Math.random() * sparkleSymbols.length)];
    
    document.body.appendChild(sparkle);
    
    setTimeout(() => {
        if (sparkle.parentNode) {
            sparkle.remove();
        }
    }, 1500);
}

function showIntro() {
    if (!gameBox) return;
    
    const themeEmojis = ['üéÄ', 'üëª', '‚ö°'];
    const themeNames = ['Quiz Dimensional', 'Quiz Sobrenatural', 'Quiz M√°gico'];
    
    gameBox.innerHTML = `
        <div class="fade-in">
            <h1>${themeEmojis[currentTheme]} ${themeNames[currentTheme]} ${themeEmojis[currentTheme]}</h1>
            <p>Hoje √© um dia muito especial, e voc√™ vai descobrir por qu√™!</p>
            <p><small>üìù ${questions.length} perguntas te esperam...</small></p>
            <button onclick="startGame()">Come√ßar</button>
            <button onclick="toggleGallery()">üì∏ Ver Fotos</button>
            ${userResponses.length > 0 ? '<button onclick="showResponses()">üíå Ver Todas as Respostas</button>' : ''}
        </div>
        <button onclick="showConfessionMode()">üíå Modo Confiss√£o</button>
    `;
}

function startGame() {
    currentStep = 0;
    score = 0;
    userResponses = []; // Reset das respostas
    totalQuestions = questions.length;
    showQuestion();
}

function showQuestion() {
    if (!gameBox) return;
    
    const q = questions[currentStep];
    const questionNumber = currentStep + 1;
    
    let html = `
        <div class="slide-in">
            <h2>
                <span class="question-number">${questionNumber}</span>
                ${q.question}
            </h2>
            <p><small>Pergunta ${questionNumber} de ${questions.length}</small></p>
    `;
    
    if (q.type === "text") {
        html += `
            <div class="text-input-container">
                <textarea 
                    class="text-input" 
                    id="text-answer" 
                    placeholder="${q.placeholder}"
                    maxlength="300"
                ></textarea>
                <button onclick="handleTextAnswer()">üíñ Enviar Resposta</button>
            </div>
        `;
    } else {
        q.options.forEach((opt, i) => {
            html += `<button onclick="handleAnswer(${i})">${opt}</button>`;
        });
    }
    
    html += '</div>';
    gameBox.innerHTML = html;
    
    // Foco no campo de texto se for pergunta de texto
    if (q.type === "text") {
        setTimeout(() => {
            const textInput = document.getElementById('text-answer');
            if (textInput) {
                textInput.focus();
            }
        }, 100);
    }
}

function handleTextAnswer() {
    const textInput = document.getElementById('text-answer');
    if (!textInput) return;
    
    const answer = textInput.value.trim();
    if (answer === '') {
        alert('Por favor, escreva sua resposta! üíï');
        return;
    }
    
    // Salvar a resposta de texto
    userResponses.push({
        questionNumber: currentStep + 1,
        question: questions[currentStep].question,
        answer: answer,
        type: 'text',
        theme: currentTheme,
        timestamp: new Date().toLocaleString()
    });
    
    // Efeito visual
    const button = document.querySelector('#game-box button');
    if (button) {
        button.classList.add('correct-answer');
    }
    
    if (correctSound) {
        correctSound.currentTime = 0;
        correctSound.play().catch(() => {});
    }
    
    const responses = [
        `Hello Kitty adorou sua resposta! üíñ`,
        `Dean e Sam aprovaram essa resposta! üëª`,
        `Resposta digna de Hogwarts! ‚ö°`
    ];
    
    setTimeout(() => {
        alert(`‚ú® ${responses[currentTheme]}`);
        proceedToNext();
    }, 800);
}

function handleAnswer(selected) {
    const buttons = document.querySelectorAll('#game-box button');
    if (buttons.length === 0) return;
    
    const selectedButton = buttons[selected];
    const q = questions[currentStep];
    const correct = q.correct;
    const isCorrect = selected === correct;
    
    // Salvar a resposta de m√∫ltipla escolha
    userResponses.push({
        questionNumber: currentStep + 1,
        question: q.question,
        answer: q.options[selected],
        correctAnswer: q.options[correct],
        type: 'multiple',
        isCorrect: isCorrect,
        theme: currentTheme,
        timestamp: new Date().toLocaleString()
    });
    
    const acertos = [
        "A Hello Kitty ficou orgulhosa! üíñ",
        "Isso a√≠, ca√ßadora! ‚Äì Dean",
        "10 pontos para Grifin√≥ria! ‚ö°"
    ];

    const erros = [
        "Oops! Tenta de novo, aprendiz de ca√ßadora.",
        "O Dean te colocaria no banco da Baby!",
        "Voc√™ beberia a po√ß√£o errada em Hogwarts..."
    ];

    if (isCorrect) {
        score++;
        selectedButton.classList.add('correct-answer');
        if (correctSound) {
            correctSound.currentTime = 0;
            correctSound.play().catch(() => {});
        }
        
        const msg = acertos[currentTheme];
        
        setTimeout(() => {
            alert(`‚úÖ ${msg}`);
            proceedToNext();
        }, 800);
    } else {
        selectedButton.classList.add('wrong-answer');
        if (wrongSound) {
            wrongSound.currentTime = 0;
            wrongSound.play().catch(() => {});
        }
        
        const msg = erros[currentTheme];
        
        setTimeout(() => {
            alert(`‚ùå ${msg}\nResposta correta: ${q.options[correct]}`);
            proceedToNext();
        }, 800);
    }
}

function proceedToNext() {
    currentStep++;
    if (currentStep < questions.length) {
        showQuestion();
    } else {
        showScene();
    }
}

function showScene() {
    if (!gameBox) return;
    
    const scenes = [
        {
            title: "Hello kitty & Daniel üê±üíå",
            text: '"Quando a gente gosta de algu√©m de verdade... a gente quer ficar mais perto sempre."',
            subtext: '"Eu tenho um envelope especial para voc√™...‚ù§"'
        },
        {
            title: "Dean & Sam Winchester üöóüëª",
            text: '"Fam√≠lia n√£o termina com sangue... e voc√™ faz parte da minha fam√≠lia."',
            subtext: '"Tenho algo importante para te dizer..."'
        },
        {
            title: "Hogwarts Express üöÇ‚ö°",
            text: '"Depois de tudo isso, algo muito real vai acontecer."',
            subtext: '"Abra este pergaminho m√°gico..."'
        }
    ];
    
    const scene = scenes[currentTheme];
    
    gameBox.innerHTML = `
        <div class="fade-in">
            <h2>${scene.title}</h2>
            <p>${scene.text}</p>
            <p>${scene.subtext}</p>
            <button onclick="showFinal()">Abrir</button>
        </div>
    `;
}

function showFinal() {
    if (!gameBox) return;
    
    // Inicia o heartbeat
    if (heartbeatSound) {
        heartbeatSound.loop = true;
        heartbeatSound.play().catch(() => {});
    }
    
    gameBox.innerHTML = `
        <div class="slide-in">
            <h1 class="heartbeat">üíç Voc√™ aceita namorar comigo? üíç</h1>
            <div class="text-input-container">
                <textarea 
                    class="text-input" 
                    id="final-answer" 
                    placeholder="Escreva sua resposta do cora√ß√£o..."
                    maxlength="500"
                ></textarea>
                <button class="heartbeat" onclick="answerFinal()">üíñ Responder</button>
            </div>
            <button class="heartbeat" onclick="answerYes()">Sim, claro! üíñ</button>
            <button class="heartbeat" onclick="answerYes()">Mil vezes sim! üòç</button>
        </div>
    `;
    
    setTimeout(() => {
        const finalInput = document.getElementById('final-answer');
        if (finalInput) {
            finalInput.focus();
        }
    }, 100);
}

function answerFinal() {
    const finalInput = document.getElementById('final-answer');
    if (!finalInput) return;
    
    const answer = finalInput.value.trim();
    if (answer === '') {
        alert('Por favor, escreva sua resposta do cora√ß√£o! üíï');
        return;
    }
    
    // Salvar a resposta final
    userResponses.push({
        questionNumber: questions.length + 1,
        question: "üíç Voc√™ aceita namorar comigo?",
        answer: answer,
        type: 'text',
        theme: currentTheme,
        timestamp: new Date().toLocaleString(),
        isFinal: true
    });
    
    proceedToFinalResponse();
}

function answerYes() {
    // Resposta r√°pida
    userResponses.push({
        questionNumber: questions.length + 1,
        question: "üíç Voc√™ aceita namorar comigo?",
        answer: "Sim! üíñ",
        type: 'text',
        theme: currentTheme,
        timestamp: new Date().toLocaleString(),
        isFinal: true
    });
    
    proceedToFinalResponse();
}

function proceedToFinalResponse() {
    if (!gameBox) return;
    
    // Para o heartbeat
    if (heartbeatSound) {
        heartbeatSound.pause();
        heartbeatSound.currentTime = 0;
    }
    
    const frasesFinais = [
        [
            "Dear Daniel: Esse amor √© mais doce que qualquer cookie! üç™",
            "Hello Kitty: Voc√™s s√£o o casal mais fofo do mundo! üíï",
            "Pompompurin: Esse amor merece todos os pudins do mundo! üçÆ"
        ],
        [
            "Dean: Esse casal √© aprovado pela Baby.",
            "Sam: Nunca vi um feiti√ßo t√£o forte quanto esse amor.",
            "Dean & Sam: Ca√ßadores tamb√©m amam. Voc√™s s√£o a prova disso."
        ],
        [
            "Dumbledore: O amor √© a magia mais poderosa de todas.",
            "Hermione: Voc√™s passaram no teste mais dif√≠cil de todos!",
            "Harry: Esse amor √© mais forte que qualquer feiti√ßo das trevas!"
        ]
    ];
    
    const frasesDoTema = frasesFinais[currentTheme];
    const aleatoria = frasesDoTema[Math.floor(Math.random() * frasesDoTema.length)];

    gameBox.innerHTML = `
        <div class="fade-in">
            <h2>Voc√™ aceitou! üíóüíó</h2>
            <p>Ele est√° te esperando com uma surpresa...üåπ</p>
            <p><strong>${aleatoria}</strong></p>
            <button onclick="showIntro()">üéÆ Jogar Novamente</button>
            <button onclick="toggleGallery()">üì∏ Ver Nossas Fotos</button>
            <button onclick="showResponses()">üìã Ver TODAS as Respostas</button>
        </div>
    `;

    // Confetti effect
    createConfetti();
}

function createConfetti() {
    // Simula efeito de confete
    for (let i = 0; i < 100; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.style.position = 'fixed';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.top = '-10px';
            confetti.style.fontSize = '20px';
            confetti.style.zIndex = '1000';
            confetti.style.pointerEvents = 'none';
            
            const symbols = ['üéâ', 'üíñ', '‚ú®', 'üå∏', 'üíï', 'üéä'];
            confetti.textContent = symbols[Math.floor(Math.random() * symbols.length)];
            
            confetti.style.animation = 'floatUp 4s linear forwards';
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                if (confetti.parentNode) {
                    confetti.remove();
                }
            }, 4000);
        }, i * 50);
    }
}

// Fun√ß√£o para parar todos os √°udios
function stopAllAudios() {
    [correctSound, wrongSound, helloKittySound, supernaturalSound, 
     harryPotterSound, heartbeatSound, echoSound, magicSound].forEach(audio => {
        if (audio) {
            audio.pause();
            audio.currentTime = 0;
        }
    });
}

// Fun√ß√£o para alternar entre os tr√™s temas
function toggleTheme() {
    const themeBtn = document.getElementById("toggle-theme");
    const decorationLeft = document.getElementById('decoration-left');
    const decorationRight = document.getElementById('decoration-right');
    
    if (!themeBtn) {
        console.warn('Elemento toggle-theme n√£o encontrado');
        return;
    }
    
    stopAllAudios();
    
    document.body.classList.remove('tema-supernatural', 'tema-harry-potter', 'tema-hello-kitty');
    
    currentTheme = (currentTheme + 1) % 3;
    
    switch(currentTheme) {
        case 0: // Hello Kitty
            document.body.classList.add('tema-hello-kitty');
            themeBtn.innerHTML = "üé≠ Tema Supernatural";
            
            if (decorationLeft) {
                decorationLeft.className = 'hello-img top-left hello-kitty-decoration';
            }
            if (decorationRight) {
                decorationRight.className = 'hello-img bottom-right hello-kitty-decoration';
            }
            
            if (helloKittySound) {
                helloKittySound.play().catch(() => {});
            }
            break;
            
        case 1: // Supernatural
            document.body.classList.add('tema-supernatural');
            themeBtn.innerHTML = "‚ö° Tema Harry Potter";
            
            if (decorationLeft) {
                decorationLeft.className = 'hello-img top-left supernatural-decoration';
            }
            if (decorationRight) {
                decorationRight.className = 'hello-img bottom-right supernatural-decoration';
            }
            
            if (supernaturalSound) {
                supernaturalSound.play().catch(() => {});
            }
            if (echoSound) {
                setTimeout(() => {
                    echoSound.play().catch(() => {});
                }, 500);
            }
            break;
            
        case 2: // Harry Potter
            document.body.classList.add('tema-harry-potter');
            themeBtn.innerHTML = "üå∏ Tema Hello Kitty";
            
            if (decorationLeft) {
                decorationLeft.className = 'hello-img top-left harry-potter-decoration';
            }
            if (decorationRight) {
                decorationRight.className = 'hello-img bottom-right harry-potter-decoration';
            }
            
            if (harryPotterSound) {
                harryPotterSound.play().catch(() => {});
            }
            if (magicSound) {
                setTimeout(() => {
                    magicSound.play().catch(() => {});
                }, 700);
            }
            break;
    }
    
    showIntro();
}

// Event listeners
document.addEventListener("DOMContentLoaded", () => {
    setTimeout(() => {
        updateDaysCounter();
        setupVolumeControl();
        
        const decorationLeft = document.getElementById('decoration-left');
        const decorationRight = document.getElementById('decoration-right');
        
        if (decorationLeft) {
            decorationLeft.className = 'hello-img top-left hello-kitty-decoration';
        }
        if (decorationRight) {
            decorationRight.className = 'hello-img bottom-right hello-kitty-decoration';
        }
        
        const themeBtn = document.getElementById("toggle-theme");
        if (themeBtn) {
            themeBtn.innerHTML = "üé≠ Tema Supernatural";
            themeBtn.addEventListener("click", toggleTheme);
        }
        
        showIntro();
    }, 100);
});

// Auto-advance na galeria de fotos
setInterval(() => {
    const gallery = document.getElementById('photo-gallery');
    if (gallery && gallery.style.display === 'block') {
        nextPhoto();
    }
}, 4000);

// Enter para enviar respostas de texto
document.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
        const textAnswer = document.getElementById('text-answer');
        const finalAnswer = document.getElementById('final-answer');
        
        if (textAnswer && textAnswer === document.activeElement) {
            handleTextAnswer();
        } else if (finalAnswer && finalAnswer === document.activeElement) {
            answerFinal();
        }
    }
});

function showConfessionMode() {
    if (!gameBox) return;

    gameBox.innerHTML = `
        <div class="slide-in">
            <h2>üíå Modo Confiss√£o</h2>
            <p>Tem algo que voc√™ nunca me contou, mas quer me dizer agora?</p>
            <div class="text-input-container">
                <textarea 
                    class="text-input" 
                    id="confession-input" 
                    placeholder="Escreva aqui com carinho..."
                    maxlength="500"
                ></textarea>
                <button onclick="submitConfession()">Enviar Confiss√£o üíñ</button>
                <button onclick="showIntro()">Voltar ao In√≠cio</button>
            </div>
        </div>
    `;
}

function submitConfession() {
    const input = document.getElementById('confession-input');
    if (!input || input.value.trim() === "") {
        alert("Escreva algo para enviar a confiss√£o üíå");
        return;
    }

    userResponses.push({
        questionNumber: "üíå",
        question: "Confiss√£o secreta",
        answer: input.value.trim(),
        type: "text",
        theme: currentTheme,
        timestamp: new Date().toLocaleString(),
        isConfession: true
    });

    alert("üíñ Sua confiss√£o foi enviada com sucesso! Agora ele poder√° ler depois com carinho.");
    showIntro();
}

// Easter eggs no console
console.log("‚ö° Expelliarmus! Bem-vinda ao seu quiz m√°gico!");
console.log("üëª Dean e Sam aprovariam esse quiz!");
console.log("üíñ Hello Kitty manda beijinhos!");
console.log("üìã Agora voc√™ pode ver TODAS as respostas dela!");
console.log("üéØ Total de perguntas: " + questions.length);